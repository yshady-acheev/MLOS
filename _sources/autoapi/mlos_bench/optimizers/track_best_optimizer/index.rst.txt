mlos_bench.optimizers.track_best_optimizer
==========================================

.. py:module:: mlos_bench.optimizers.track_best_optimizer

.. autoapi-nested-parse::

   Mock optimizer for mlos_bench.



Classes
-------

.. autoapisummary::

   mlos_bench.optimizers.track_best_optimizer.TrackBestOptimizer


Module Contents
---------------

.. py:class:: TrackBestOptimizer(tunables: mlos_bench.tunables.tunable_groups.TunableGroups, config: dict, global_config: Optional[dict] = None, service: Optional[mlos_bench.services.base_service.Service] = None)

   Bases: :py:obj:`mlos_bench.optimizers.base_optimizer.Optimizer`


   Base Optimizer class that keeps track of the best score and configuration.

   Create a new optimizer for the given configuration space defined by the
   tunables.

   :param tunables: The tunables to optimize.
   :type tunables: TunableGroups
   :param config: Free-format key/value pairs of configuration parameters to pass to the optimizer.
   :type config: dict
   :param global_config:
   :type global_config: Optional[dict]
   :param service:
   :type service: Optional[Service]


   .. py:method:: get_best_observation() -> Union[Tuple[Dict[str, float], mlos_bench.tunables.tunable_groups.TunableGroups], Tuple[None, None]]

      Get the best observation so far.

      :returns: **(value, tunables)** -- The best value and the corresponding configuration.
                (None, None) if no successful observation has been registered yet.
      :rtype: Tuple[Dict[str, float], TunableGroups]



   .. py:method:: register(tunables: mlos_bench.tunables.tunable_groups.TunableGroups, status: mlos_bench.environments.status.Status, score: Optional[Dict[str, mlos_bench.tunables.tunable.TunableValue]] = None) -> Optional[Dict[str, float]]

      Register the observation for the given configuration.

      :param tunables: The configuration that has been benchmarked.
                       Usually it's the same config that the `.suggest()` method returned.
      :type tunables: TunableGroups
      :param status: Final status of the experiment (e.g., SUCCEEDED or FAILED).
      :type status: Status
      :param score: A dict with the final benchmark results.
                    None if the experiment was not successful.
      :type score: Optional[Dict[str, TunableValue]]

      :returns: **value** -- Benchmark scores extracted (and possibly transformed)
                from the dataframe that's being MINIMIZED.
      :rtype: Optional[Dict[str, float]]



